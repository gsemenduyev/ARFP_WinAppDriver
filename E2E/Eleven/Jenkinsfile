#!/usr/bin/env groovy
import groovy.json.*
pipeline {
    agent {
        docker {
            label 'al2'
            image 'cypress/browsers:node18.12.0-chrome107'
            args '--ipc=host'
    }
}
    parameters{
        choice(name: 'ENVIRONMENT', choices: ['Production', 'QA', 'UAT'], description: "Choose the Environment to run")
        string(name: 'RUN_ID', defaultValue: '', trim: true, description: "Enter the Test Rail Run ID")
        
    }
    options{
        ansiColor('xterm')
    }
    stages {
        stage('Create TestRail Run') {
            steps {
                script {
                        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'TestRail_GS', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME']])  {
                        def domain = "https://testrail.stratag.com/"
                        def username = "${USERNAME}"
                        def password = "${PASSWORD}"
                        def runId = "${RUN_ID}"
                        // Update cypress.env.json
                        def reporterConfig = readJSON file: 'E2E/Eleven/cypress.env.json'
                        def testrail = [
                       'domain': (domain),
                       'username': (username),
                       'password': (password),
                       'runId': (runId)
                        ]
                        reporterConfig.put("testrail", testrail)
                        def json = JsonOutput.toJson(reporterConfig)
                        json = JsonOutput.prettyPrint(json)
                        writeFile(file: 'E2E/Eleven/cypress.env.json', text: json)

                       def reporterConfig1 = readJSON file: 'E2E/Eleven/cypress.env.json'
                       testrail = [
                       'domain': reporterConfig1.testrail.domain,
                       'username': reporterConfig1.testrail.username.values[0],
                       'password': reporterConfig1.testrail.password.values[0],
                       'runId': reporterConfig1.testrail.runId.values[0]
                        ]
                        reporterConfig.put("testrail", testrail)
                        json = JsonOutput.toJson(reporterConfig)
                        json = JsonOutput.prettyPrint(json)
                        writeFile(file: 'E2E/Eleven/cypress.env.json', text: json)
                    }
                }
            }
        }
        stage('Test') {
            steps {
            sh "cd E2E/Eleven && npm cache clean --force && npm ci --prefer-offline && npx cypress run --browser chrome --env tags=\"@${PROJECTS}\",ENV=\"${ENVIRONMENT}\""
            }

        }
        stage('Clear TestRail file') {
            steps {
                script {
                        // Update cypress.env.json
                        def reporterConfig = readJSON file: 'E2E/Eleven/cypress.env.json'
                        def testrail = [
                       'domain': '-',
                       'username': '-',
                       'password': '-',
                       'runId': '-'
                        ]
                        reporterConfig.put("testrail", testrail)
                        def json = JsonOutput.toJson(reporterConfig)
                        json = JsonOutput.prettyPrint(json)
                        writeFile(file: 'E2E/Eleven/cypress.env.json', text: json)
                    }
                }
            }
 }

    post{
        always{
            script {
                sh "cd E2E/Eleven && node ./cucumber-html-report.js"
            }
      publishHTML (target : [allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'E2E/Eleven/cypress/reports',
        reportFiles: 'cucumber-reports/cucumber-html-report/index.html',
        reportName: 'Cucumber Report',
        reportTitles: 'Cucumber Report'])
      publishHTML (target : [allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'E2E/Eleven/cypress/reports',
        reportFiles: 'multi-html-report/index.html',
        reportName: 'Multi HTML Report',
        reportTitles: 'Multi HTML Report'])
        }
    }
}